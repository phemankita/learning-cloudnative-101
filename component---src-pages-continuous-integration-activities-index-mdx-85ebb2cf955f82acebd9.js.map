{"version":3,"sources":["webpack:///./src/pages/continuous-integration/activities/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","AnchorLinks","AnchorLink","Tabs","Tab","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","label","isMDXComponent"],"mappings":"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","file":"component---src-pages-continuous-integration-activities-index-mdx-85ebb2cf955f82acebd9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Pre-requisites</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">SetUp</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Create Target Namespace</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Pipeline Resources</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Tasks</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Pipelines</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Deploy Application</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Pre-requisites`}</h2>\n    <p>{`Make sure your environment is properly setup.`}</p>\n    <p>{`Follow the instructions `}<a parentName=\"p\" {...{\n        \"href\": \"../../prerequisites#environment-setup\"\n      }}>{`here`}</a></p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"OpenShift\" mdxType=\"Tab\">\n        <h2>{`SetUp`}</h2>\n        <h3>{`Tekton CLI Installation`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/cli\"\n              }}>{`Tekton CLI`}</a>{` is command line utility used to interact with the Tekton resources.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Follow the instructions on the tekton CLI github repository `}<a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/cli#installing-tkn\"\n              }}>{`https://github.com/tektoncd/cli#installing-tkn`}</a></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`For MacOS for example you can use brew`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`brew tap tektoncd/tools\nbrew install tektoncd/tools/tektoncd-cli\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Verify the Tekton cli`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn version\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The command should show a result like:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`$ tkn version\nClient version: 0.8.0\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`If you already have the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` install you can upgrade running`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`brew upgrade tektoncd/tools/tektoncd-cli\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`Tekton Pipelines Installation`}</h3>\n        <ul>\n          <li parentName=\"ul\">{`To deploy the Tekton pipelines:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc apply --filename https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/tekton-lab/tekton-operator.yaml\n`}</code></pre></li>\n          <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Note`}</em></strong>{`: It will take few mins for the Tekton pipeline components to be installed, you an watch the status using the command:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc get pods -n openshift-operators -w\n`}</code></pre>{`  You can use `}<inlineCode parentName=\"li\">{`Ctrl+c`}</inlineCode>{` to terminate the watch`}</li>\n          <li parentName=\"ul\">{`A successful deployment of Tekton pipelines will show the following pods:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                                         READY   STATUS    RESTARTS   AGE\nopenshift-pipelines-operator-9cdbbb854-x9tvs   1/1     Running   0          25s\n`}</code></pre></li>\n        </ul>\n        <h2>{`Create Target Namespace`}</h2>\n        <ul>\n          <li parentName=\"ul\">{`Set the environment variable `}<inlineCode parentName=\"li\">{`NAMESPACE`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`tekton-demo`}</inlineCode>{`, if you open a new terminal remember to set this environment again`}<pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`export NAMESPACE=tekton-demo\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Create a the namespace using the variable `}<inlineCode parentName=\"li\">{`NAMESPACE`}</inlineCode><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create namespace $NAMESPACE\n`}</code></pre></li>\n        </ul>\n        <h2>{`Pipeline Resources`}</h2>\n        <h3>{`Pipeline Resource Creation`}</h3>\n        <h4>{`Create a PipelineResource of type `}<inlineCode parentName=\"h4\">{`git`}</inlineCode></h4>\n        <ul>\n          <li parentName=\"ul\">{`Create the file `}<strong parentName=\"li\">{`git.yaml`}</strong><pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: PipelineResource\nmetadata:\n  name: source\nspec:\n  type: git\n  params:\n    - name: revision\n      value: master\n    - name: url\n      value: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n`}</code></pre>{`  Verify the file content`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`cat git.yaml\n`}</code></pre></li>\n        </ul>\n        <h4>{`Create a PipelineResource of type `}<inlineCode parentName=\"h4\">{`image`}</inlineCode></h4>\n        <ul>\n          <li parentName=\"ul\">{`Create the file `}<strong parentName=\"li\">{`image.yaml`}</strong>{` and edit the file by replacing `}<inlineCode parentName=\"li\">{`\\${DOCKER_USERNAME}`}</inlineCode>{` with your docker user name on the image registry`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: PipelineResource\nmetadata:\n  name: image\nspec:\n  type: image\n  params:\n    - name: url\n      value: index.docker.io/\\${DOCKER_USERNAME}/cloudnative_sample_app\n`}</code></pre>{`  Verify the file content, and make sure the `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` value is valid with your dockerhub username replaced`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`cat image.yaml\n`}</code></pre></li>\n        </ul>\n        <h3>{`Pipeline Resources deployment`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Each pipeline resource has:`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\">{`name`}</strong>{`: the name using which it will be referred in other places`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`type`}</strong>{`: the type of the pipeline resource, in this example we have two types`}<ul parentName=\"li\">\n                  <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`git`}</em></strong>{` - this type of resource refers to a GitHub repository`}</li>\n                  <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`image`}</em></strong>{` - this type of resource is linux container image`}</li>\n                </ul></li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`params`}</strong>{`: each type can have one or more parameters that will be used to configure the underlying type. In the above example for the git-source pipeline resource, the parameters url and revision are used to identify the GitHub repository url and revision of the sources respectively.`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`More details on other types of pipeline resource types is available `}<a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/resources.md#resource-types\"\n              }}>{`here`}</a>{`.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the pipeline resources using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc apply -f git.yaml -n $NAMESPACE\noc apply -f image.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`Verify the deployed resource`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to list the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn res ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list two resources as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                        TYPE    DETAILS\nsource                      git     url: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\nimage                       image   url: index.docker.io/yourdockerhubusername/cloudnative_sample_app\n`}</code></pre>\n            <p parentName=\"li\">{`  Use the command help via `}<inlineCode parentName=\"p\">{`tkn res --help`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to describe the git resource`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn res describe source -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The output should look like this:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Name:                    source\nNamespace:               tekton-demo\nPipelineResource Type:   git\n\nParams\nNAME       VALUE\nrevision   master\nurl        https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n\nSecret Params\nNo secret params\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to describe the git resource`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn res describe image -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The output should look like this:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Name:                    image\nNamespace:               tekton-demo\nPipelineResource Type:   image\n\nParams\nNAME   VALUE\nurl    index.docker.io/myusername/cloudnative_sample_app\n\nSecret Params\nNo secret params\n`}</code></pre>\n          </li>\n        </ul>\n        <h2>{`Tasks`}</h2>\n        <h3>{`Task Creation`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the below yaml files.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The following snippet shows what a Tekton Task YAML looks like:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`test_task.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: java-test\nspec:\n  inputs:\n    resources:\n      - name: source\n        type: git\n    params:\n      - name: maven-image\n        type: string\n        default: maven:3.3-jdk-8\n  steps:\n    - name: test\n      image: $(inputs.params.maven-image)\n      workingdir: $(inputs.resources.source.path)\n      command: [\"/bin/bash\"]\n      args:\n        - -c\n        - |\n          set -e\n          mvn test\n          echo \"tests passed with rc=$?\"\n      volumeMounts:\n        - name: m2-repository\n          mountPath: /.m2\n  volumes:\n    - name: m2-repository\n      emptyDir: {}\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Each Task has the following:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`name`}</strong>{` - the unique name using which the task can be referred`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`inputs`}</strong>{` - the inputs to the task`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`resources`}</em></strong>{` - the pipeline resources that will be used in the task e.g. git-source`}<ul parentName=\"li\">\n                  <li parentName=\"ul\">{`name - the name of the input resource using which it can be referenced and bound via TaskRun`}</li>\n                  <li parentName=\"ul\">{`type - the type of the input resource, typically the pipeline resource type`}</li>\n                </ul></li>\n              <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`params`}</em></strong>{` - the parameters that will be used in the task steps. Each parameter has`}<ul parentName=\"li\">\n                  <li parentName=\"ul\">{`name - the name of the parameter`}</li>\n                  <li parentName=\"ul\">{`description - the description of the parameter`}</li>\n                  <li parentName=\"ul\">{`default - the default value of parameter`}</li>\n                </ul></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{`: The `}<inlineCode parentName=\"p\">{`TaskRun`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`PipelineRun`}</inlineCode>{` could override the parameter values, if no parameter value is passed then the default value will be used.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`outputs`}</strong>{` the pipeline resource that will end artifact of the task. In the above example the build will produce a container image artifact.`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`resources`}</em></strong>{` - the pipeline resources that will be used in the task e.g. builtImage`}<ul parentName=\"li\">\n                  <li parentName=\"ul\">{`name - the name of the input resource using which it can be referenced and bound via TaskRun`}</li>\n                  <li parentName=\"ul\">{`type - the type of the input resource, typically the pipeline resource type`}</li>\n                </ul></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`steps`}</strong>{` - One or more sub-tasks that will be executed in the defined order. The step has all the attributes like a Pod spec`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`stepTemplate`}</strong>{` - when there is a need to have similar container configuration across all steps of a the task, we can have them defined in the stepTemplate, the task steps will inherit them implicitly in all steps. In the example above we define the resources and securityContext for all the steps`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`volumes`}</strong>{` - the task can also mount external volumes using the volumes attribute.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The parameters that were part of the spec inputs  params can be used in the steps using the notation `}<inlineCode parentName=\"p\">{`$(<variable-name>)`}</inlineCode>{`.`}</p>\n          </li>\n        </ul>\n        <h3>{`Task Deploy`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The application test task could be created using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc apply -f test_task.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn task ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list one Task as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME        AGE\njava-test   22 seconds ago\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`TaskRun`}</h3>\n        <ul>\n          <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/taskruns.md\"\n            }}>{`TaskRun`}</a>{` is used to run a specific task independently. In the following section we will run the build-app task created in the previous step`}</li>\n        </ul>\n        <h4>{`TaskRun Creation`}</h4>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The following snippet shows what a Tekton TaskRun YAML looks like:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`test_taskrun.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: TaskRun\nmetadata:\n  generateName: test-task-run-\nspec:\n  taskRef:\n    name: java-test\n  inputs:\n    resources:\n      - name: source\n        resourceRef:\n          name: source\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`generateName`}</strong>{` - since the TaskRun can be run many times, in order to have unqiue name across the TaskRun ( helpful when checking the TaskRun history) we use this generateName instead of name. When Kubernetes sees generateName it will generate unquie set of characters and suffix the same to build-app-, similar to how pod names are generated`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`taskRef`}</strong>{` - this is used to refer to the Task by its name that will be run as part of this TaskRun. In this example we use build-app Task.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`As described in the earlier section that the Task inputs and outputs could be overridden via TaskRun.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`In this example we make the Task Run `}<inlineCode parentName=\"p\">{`spec > inputs > resources > source`}</inlineCode>{` to refer to pipeline resource `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` via the `}<inlineCode parentName=\"p\">{`resourceRef`}</inlineCode>{`.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The application test task(java-maven-test) could be run using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create -n $NAMESPACE -f test_taskrun.yaml\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{` - As tasks will use generated name, never use `}<inlineCode parentName=\"p\">{`oc apply -f test_taskrun.yaml`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The above command should list one TaskRun as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                       STARTED        DURATION   STATUS\ntest-task-run-q6s8c        1 minute ago   ---        Running(Pending)\n`}</code></pre>\n            <p parentName=\"li\">{`  `}<strong parentName=\"p\">{`Note`}</strong>{` - It will take few seconds for the TaskRun to show status as Running as it needs to download the container images.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To check the logs of the Task Run using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{`:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn tr logs -f -a -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{` - Each task step will be run within a container of its own.\nThe -f or -a allows to tail the logs from all the containers of the task. For more options run `}<inlineCode parentName=\"p\">{`tkn tr logs --help`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`If you see the TaskRun status as Failed or Error use the following command to check the reason for error:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn tr describe <taskrun-name> -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`If it is successful, you will see something like below.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The above command should list one TaskRun as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                  STARTED          DURATION     STATUS\ntest-task-run-q6s8c   47 seconds ago   34 seconds   Succeeded\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`Creating additional tasks and deploying them`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create a Task to build a container image and push to the registry`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`This task will be later used by the pipeline.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Download the task file `}<a parentName=\"p\" {...{\n                \"href\": \"/yamls/tekton-lab/task-buildah.yaml\"\n              }}>{`task-buildah.yaml`}</a>{` to build the image, push the image to the registy:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the `}<inlineCode parentName=\"p\">{`buildah`}</inlineCode>{` Task using the file and the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc apply -f task-buildah.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn task ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list one Task as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME              AGE\nbuildah            4 seconds ago\njava-test         46 minutes ago\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To access the docker registry, create the required secret as follows.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the environment variables to be use, replace with real values and include the single quotes:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`export DOCKER_USERNAME='<DOCKER_USERNAME>'\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`export DOCKER_PASSWORD='<DOCKER_PASSWORD>'\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`export DOCKER_EMAIL='<DOCKER_EMAIL>'\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run the following command to create a secret `}<inlineCode parentName=\"p\">{`regcred`}</inlineCode>{` in the namespace `}<inlineCode parentName=\"p\">{`NAMESPACE`}</inlineCode></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create secret docker-registry regcred \\\\\n  --docker-server=https://index.docker.io/v1/ \\\\\n  --docker-username=\\${DOCKER_USERNAME} \\\\\n  --docker-password=\\${DOCKER_PASSWORD} \\\\\n  --docker-email=\\${DOCKER_EMAIL} \\\\\n  -n \\${NAMESPACE}\n`}</code></pre>\n            <p parentName=\"li\">{`  Before creating, replace the values as mentioned above.`}</p>\n  <InlineNotification mdxType=\"InlineNotification\">\n              <p parentName=\"li\">{`  `}<strong parentName=\"p\">{` Note: `}</strong>{` If your docker password contains special characters in it, please enclose the password in double quotes or place an escape character before each special character.`}</p>\n  </InlineNotification>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`(Optional) Only if you have problems with the credentials you can recreate it, but you have to deleted first`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc delete secret regcred -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Before we run the Task using TaskRun let us create the Kubernetes service account and attach the needed permissions to the service account, the following Kubernetes resource defines a service account called `}<inlineCode parentName=\"p\">{`pipeline`}</inlineCode>{` in namespace `}<inlineCode parentName=\"p\">{`$NAMESPACE`}</inlineCode>{` who will have administrative role within the `}<inlineCode parentName=\"p\">{`$NAMESPACE`}</inlineCode>{` namespace.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`sa.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: pipeline\nsecrets:\n  - name: regcred\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create sa role as follows:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc create -n $NAMESPACE -f sa.yaml\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Lets create a Task Run for `}<inlineCode parentName=\"p\">{`buildah`}</inlineCode>{` Task using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI passing the inputs, outputs and service account`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn task start buildah \\\\\n  -i source=source \\\\\n  -i image=image \\\\\n  -s pipeline \\\\\n  -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The task will start and logs will start printing automatically`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Taskrun started: buildah-run-vvrg2\nWaiting for logs to be available...\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Verify the status of the Task Run`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  Output should look like this`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                  STARTED          DURATION     STATUS\nbuildah-run-zbsrv      2 minutes ago    1 minute     Succeeded\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To clean up all Pods associated with all Task Runs, delete all the task runs resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc delete taskrun --all -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`(Optional) Instead of starting the Task via `}<inlineCode parentName=\"p\">{`tkn task start`}</inlineCode>{` you could also use yaml TaskRun, create a file `}<strong parentName=\"p\">{`taskrun.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: TaskRun\nmetadata:\n  generateName: buildah-task-run-\nspec:\n  serviceAccountName: pipeline\n  taskRef:\n    name: buildah\n  inputs:\n    resources:\n      - name: source\n        resourceRef:\n          name: source\n      - name: image\n        resourceRef:\n          name: image\n`}</code></pre>\n            <p parentName=\"li\">{`  Then create the TaskRun with `}<inlineCode parentName=\"p\">{`generateName`}</inlineCode></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc create -f taskrun.yaml -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  Follow the logs with:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn tr logs -f -n $NAMESPACE\n`}</code></pre>\n          </li>\n        </ul>\n        <h2>{`Pipelines`}</h2>\n        <h3>{`Pipeline Creation`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Pipelines allows to start multiple Tasks, in parallel or in a `}<a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#runafter\"\n              }}>{`certain order`}</a></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`pipeline.yaml`}</strong>{`, the Pipeline contains two Tasks`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: Pipeline\nmetadata:\n  name: test-build-push\nspec:\n  resources:\n    - name: source\n      type: git\n    - name: image\n      type: image\n  tasks:\n    - name: test\n      taskRef:\n        name: java-test\n      resources:\n        inputs:\n          - name: source\n            resource: source\n    - name: build-push\n      taskRef:\n        name: buildah\n      runAfter: [test]\n      resources:\n        inputs:\n          - name: source\n            resource: source\n          - name: image\n            resource: image\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Pipeline defines a list of Tasks to execute in order, while also indicating if any outputs should be used as inputs of a following Task by using the from field and also indicating the order of executing (using the runAfter and from fields). The same variable substitution you used in Tasks is also available in a Pipeline.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the Pipeline using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc apply -f pipeline.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`The above command should list one Pipeline as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`NAME              AGE              LAST RUN   STARTED   DURATION   STATUS\ntest-build-push   31 seconds ago   ---        ---       ---        ---\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`PipelineRun`}</h3>\n        <h4>{`PipelineRun Creation`}</h4>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To execute the Tasks in the Pipeline, you must create a PipelineRun. Creation of a PipelineRun will trigger the creation of TaskRuns for each Task in your pipeline.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`pipelinerun.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: PipelineRun\nmetadata:\n  generateName: test-build-push-run-\nspec:\n  serviceAccountName: pipeline\n  pipelineRef:\n    name: test-build-push\n  serviceAccountName: pipeline\n  resources:\n    - name: source\n      resourceRef:\n        name: source\n    - name: image\n      resourceRef:\n        name: image\n`}</code></pre>\n            <p parentName=\"li\">{`  `}<strong parentName=\"p\">{`serviceAccount`}</strong>{` - it is always recommended to have a service account associated with PipelineRun, which can then be used to define fine grained roles.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the PipelineRun using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc create -f pipelinerun.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipelinerun ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list one PipelineRun as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`NAME                        STARTED         DURATION   STATUS\ntest-build-push-run-c7zgv   8 seconds ago   ---        Running\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Wait for few minutes for your pipeline to complete all the tasks. If it is successful, you will see something like below.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline ls -n $NAMESPACE\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME              AGE              LAST RUN                    STARTED         DURATION    STATUS\ntest-build-push   33 minutes ago   test-build-push-run-c7zgv   2 minutes ago   2 minutes   Succeeded\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run again the pipeline ls command`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipelinerun ls -n $NAMESPACE\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                        STARTED         DURATION    STATUS\ntest-build-push-run-c7zgv   2 minutes ago   2 minutes   Succeeded\n`}</code></pre>\n            <p parentName=\"li\">{`  If it is successful, go to your container registry account and verify if you have the `}<inlineCode parentName=\"p\">{`cloudnative_sample_app`}</inlineCode>{` image pushed.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`(Optional) Run the pipeline again using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline start test-build-push \\\\\n  -r source=source \\\\\n  -r image=image \\\\\n  -s pipeline \\\\\n  -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`(Optional) Re-run the pipeline using last pipelinerun values`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline start test-build-push --last -n $NAMESPACE\n`}</code></pre>\n          </li>\n        </ul>\n        <h2>{`Deploy Application`}</h2>\n        <ul>\n          <li parentName=\"ul\">{`Deploy the app as follows:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export APP_YAML_URL='https://raw.githubusercontent.com/ibm-cloud-architecture/cloudnative_sample_app_deploy/master/openshift'\noc apply -n $NAMESPACE -f $APP_YAML_URL/deployment.yaml\noc apply -n $NAMESPACE -f $APP_YAML_URL/service.yaml\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Replace the default image with the new image you deployed using Tekton`}</li>\n          <li parentName=\"ul\">{`Replace `}<inlineCode parentName=\"li\">{`<DOCKER_USERNAME>`}</inlineCode>{` with your username`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export DOCKER_USERNAME='<DOCKER_USERNAME>'\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Replace `}<inlineCode parentName=\"li\">{`<SHORT_GIT_HASH>`}</inlineCode>{` with the tag of the image you push to the registry, you can go the registry Web UI and verify the tag value.`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export SHORT_GIT_HASH='<SHORT_GIT_HASH>'\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Set the environment variable `}<inlineCode parentName=\"li\">{`IMAGE_URL`}</inlineCode>{` to the new image url value sing the two previous environment variables `}<inlineCode parentName=\"li\">{`DOCKER_USERNAME`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`SHORT_GIT_HASH`}</inlineCode><pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export IMAGE_URL=docker.io/\\${DOCKER_USERNAME}/cloudnative_sample_app:\\${SHORT_GIT_HASH}\necho $IMAGE_URL\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Replace the image on the deployment`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc set image \\\\\n  deployment/cloudnativesampleapp-deployment \\\\\n  \\\\*=\\${IMAGE_URL} \\\\\n  -n $NAMESPACE --record\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Verify the image is set`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc get deploy \\\\\n  cloudnativesampleapp-deployment \\\\\n  -o jsonpath='{.spec.template.spec.containers[0].image}' \\\\\n  -n $NAMESPACE\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Verify if the pods are running:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc get pods -n $NAMESPACE -l app=cloudnativesampleapp-selector\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                          READY   STATUS      RESTARTS   AGE\ncloudnativesampleapp...       1/1     Running     0          82s\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Retrieve the service NodePort:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc describe svc cloudnativesampleapp-service -n $NAMESPACE | grep NodePort\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Type:                     NodePort\nNodePort:                 http  30632/TCP\n`}</code></pre>{`  In this instance the NodePort assigned is `}<inlineCode parentName=\"li\">{`30632`}</inlineCode></li>\n          <li parentName=\"ul\">{`Get the External Public IP as follows:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`crc ip\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`192.168.64.30\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Now access the compose the URL of the App using IP and NodePort`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export APP_EXTERNAL_IP=$(crc ip)\nexport APP_NODEPORT=$(oc get svc cloudnativesampleapp-service -n $NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')\nexport APP_URL=\"http://\\${APP_EXTERNAL_IP}:\\${APP_NODEPORT}/greeting?name=Carlos\"\necho $APP_URL\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`http://192.168.64.30:30632//greeting?name=Carlos\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Now access the app from terminal or browser`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`curl $APP_URL\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`open $APP_URL\n`}</code></pre></li>\n        </ul>\n      </Tab>\n      <Tab label=\"IKS\" mdxType=\"Tab\">\n        <h2>{`SetUp`}</h2>\n        <h3>{`Tekton CLI Installation`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/cli\"\n              }}>{`Tekton CLI`}</a>{` is command line utility used to interact with the Tekton resources.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Follow the instructions on the tekton CLI github repository `}<a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/cli#installing-tkn\"\n              }}>{`https://github.com/tektoncd/cli#installing-tkn`}</a></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`For MacOS for example you can use brew`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`brew tap tektoncd/tools\nbrew install tektoncd/tools/tektoncd-cli\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Verify the Tekton cli`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn version\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The command should show a result like:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`$ tkn version\nClient version: 0.8.0\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`If you already have the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` install you can upgrade running`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`brew upgrade tektoncd/tools/tektoncd-cli\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`Tekton Pipelines Installation`}</h3>\n        <ul>\n          <li parentName=\"ul\">{`To deploy the Tekton pipelines:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml\n`}</code></pre></li>\n          <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Note`}</em></strong>{`: It will take few mins for the Tekton pipeline components to be installed, you an watch the status using the command:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl get pods -n tekton-pipelines -w\n`}</code></pre>{`  You can use `}<inlineCode parentName=\"li\">{`Ctrl+c`}</inlineCode>{` to terminate the watch`}</li>\n          <li parentName=\"ul\">{`A successful deployment of Tekton pipelines will show the following pods:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                                         READY   STATUS    RESTARTS   AGE\ntekton-pipelines-controller-9b8cccff-j6hvr   1/1     Running   0          2m33s\ntekton-pipelines-webhook-6fc9d4d9b6-kpkp7    1/1     Running   0          2m33s\n`}</code></pre></li>\n        </ul>\n        <h3>{`Tekton Dashboard Installation (Optional)`}</h3>\n        <ul>\n          <li parentName=\"ul\">{`To deploy the Tekton dashboard:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl apply --filename https://github.com/tektoncd/dashboard/releases/download/v0.6.1/tekton-dashboard-release.yaml\n`}</code></pre></li>\n          <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`Note`}</em></strong>{`: It will take few mins for the Tekton dashboard components to be installed, you an watch the status using the command:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl get pods -n tekton-pipelines -w\n`}</code></pre>{`  You can use `}<inlineCode parentName=\"li\">{`Ctrl+c`}</inlineCode>{` to terminate the watch`}</li>\n          <li parentName=\"ul\">{`A successful deployment of Tekton pipelines will show the following pods:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                                           READY   STATUS    RESTARTS   AGE\ntekton-dashboard-59c7fbf49f-79f7q              1/1     Running   0          50s\ntekton-pipelines-controller-6b7f7cf7d8-r65ps   1/1     Running   0          15m\ntekton-pipelines-webhook-7bbd8fcc45-sfgxs      1/1     Running   0          15m\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Access the dashboard as follows:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl --namespace tekton-pipelines port-forward svc/tekton-dashboard 9097:9097\n`}</code></pre>{`  You can access the web UI at `}<a parentName=\"li\" {...{\n              \"href\": \"http://localhost:9097\"\n            }}>{`http://localhost:9097`}</a>{` .`}</li>\n        </ul>\n        <h2>{`Create Target Namespace`}</h2>\n        <ul>\n          <li parentName=\"ul\">{`Set the environment variable `}<inlineCode parentName=\"li\">{`NAMESPACE`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`tekton-demo`}</inlineCode>{`, if you open a new terminal remember to set this environment again`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export NAMESPACE=tekton-demo\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Create a the namespace using the variable `}<inlineCode parentName=\"li\">{`NAMESPACE`}</inlineCode><pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl create namespace $NAMESPACE\n`}</code></pre></li>\n        </ul>\n        <h2>{`Pipeline Resources`}</h2>\n        <h3>{`Pipeline Resource Creation`}</h3>\n        <h4>{`Create a PipelineResource of type `}<inlineCode parentName=\"h4\">{`git`}</inlineCode></h4>\n        <ul>\n          <li parentName=\"ul\">{`Create the file `}<strong parentName=\"li\">{`git.yaml`}</strong><pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: PipelineResource\nmetadata:\n  name: source\nspec:\n  type: git\n  params:\n    - name: revision\n      value: master\n    - name: url\n      value: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n`}</code></pre>{`  Verify the file content`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`cat git.yaml\n`}</code></pre></li>\n        </ul>\n        <h4>{`Create a PipelineResource of type `}<inlineCode parentName=\"h4\">{`image`}</inlineCode></h4>\n        <ul>\n          <li parentName=\"ul\">{`Create the file `}<strong parentName=\"li\">{`image.yaml`}</strong>{` and edit the file by replacing `}<inlineCode parentName=\"li\">{`\\${DOCKER_USERNAME}`}</inlineCode>{` with your docker user name on the image registry`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: PipelineResource\nmetadata:\n  name: image\nspec:\n  type: image\n  params:\n    - name: url\n      value: index.docker.io/\\${DOCKER_USERNAME}/cloudnative_sample_app\n`}</code></pre>{`  Verify the file content, and make sure the `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` value is valid with your dockerhub username replaced`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`cat image.yaml\n`}</code></pre></li>\n        </ul>\n        <h3>{`Pipeline Resources deployment`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Each pipeline resource has:`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\">{`name`}</strong>{`: the name using which it will be referred in other places`}</li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`type`}</strong>{`: the type of the pipeline resource, in this example we have two types`}<ul parentName=\"li\">\n                  <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`git`}</em></strong>{` - this type of resource refers to a GitHub repository`}</li>\n                  <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`image`}</em></strong>{` - this type of resource is linux container image`}</li>\n                </ul></li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`params`}</strong>{`: each type can have one or more parameters that will be used to configure the underlying type. In the above example for the git-source pipeline resource, the parameters url and revision are used to identify the GitHub repository url and revision of the sources respectively.`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`More details on other types of pipeline resource types is available `}<a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/resources.md#resource-types\"\n              }}>{`here`}</a>{`.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the pipeline resources using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl apply -f git.yaml -n $NAMESPACE\nkubectl apply -f image.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`Verify the deployed resource`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to list the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn res ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list two resources as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                        TYPE    DETAILS\nsource                      git     url: https://github.com/ibm-cloud-architecture/cloudnative_sample_app\nimage                       image   url: index.docker.io/yourdockerhubusername/cloudnative_sample_app\n`}</code></pre>\n            <p parentName=\"li\">{`  Use the command help via `}<inlineCode parentName=\"p\">{`tkn res --help`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to describe the git resource`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn res describe source -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The output should look like this:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Name:                    source\nNamespace:               tekton-demo\nPipelineResource Type:   git\n\nParams\nNAME       VALUE\nrevision   master\nurl        https://github.com/ibm-cloud-architecture/cloudnative_sample_app\n\nSecret Params\nNo secret params\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to describe the git resource`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn res describe image -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The output should look like this:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Name:                    image\nNamespace:               tekton-demo\nPipelineResource Type:   image\n\nParams\nNAME   VALUE\nurl    index.docker.io/myusername/cloudnative_sample_app\n\nSecret Params\nNo secret params\n`}</code></pre>\n          </li>\n        </ul>\n        <h2>{`Tasks`}</h2>\n        <h3>{`Task Creation`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the below yaml files.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The following snippet shows what a Tekton Task YAML looks like:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`test_task.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: Task\nmetadata:\n  name: java-test\nspec:\n  inputs:\n    resources:\n      - name: source\n        type: git\n    params:\n      - name: maven-image\n        type: string\n        default: maven:3.3-jdk-8\n  steps:\n    - name: test\n      image: $(inputs.params.maven-image)\n      workingdir: $(inputs.resources.source.path)\n      command: [\"/bin/bash\"]\n      args:\n        - -c\n        - |\n          set -e\n          mvn test\n          echo \"tests passed with rc=$?\"\n      volumeMounts:\n        - name: m2-repository\n          mountPath: /.m2\n  volumes:\n    - name: m2-repository\n      emptyDir: {}\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Each Task has the following:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`name`}</strong>{` - the unique name using which the task can be referred`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`inputs`}</strong>{` - the inputs to the task`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`resources`}</em></strong>{` - the pipeline resources that will be used in the task e.g. git-source`}<ul parentName=\"li\">\n                  <li parentName=\"ul\">{`name - the name of the input resource using which it can be referenced and bound via TaskRun`}</li>\n                  <li parentName=\"ul\">{`type - the type of the input resource, typically the pipeline resource type`}</li>\n                </ul></li>\n              <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`params`}</em></strong>{` - the parameters that will be used in the task steps. Each parameter has`}<ul parentName=\"li\">\n                  <li parentName=\"ul\">{`name - the name of the parameter`}</li>\n                  <li parentName=\"ul\">{`description - the description of the parameter`}</li>\n                  <li parentName=\"ul\">{`default - the default value of parameter`}</li>\n                </ul></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{`: The `}<inlineCode parentName=\"p\">{`TaskRun`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`PipelineRun`}</inlineCode>{` could override the parameter values, if no parameter value is passed then the default value will be used.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`outputs`}</strong>{` the pipeline resource that will end artifact of the task. In the above example the build will produce a container image artifact.`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\"><em parentName=\"strong\">{`resources`}</em></strong>{` - the pipeline resources that will be used in the task e.g. builtImage`}<ul parentName=\"li\">\n                  <li parentName=\"ul\">{`name - the name of the input resource using which it can be referenced and bound via TaskRun`}</li>\n                  <li parentName=\"ul\">{`type - the type of the input resource, typically the pipeline resource type`}</li>\n                </ul></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`steps`}</strong>{` - One or more sub-tasks that will be executed in the defined order. The step has all the attributes like a Pod spec`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`stepTemplate`}</strong>{` - when there is a need to have similar container configuration across all steps of a the task, we can have them defined in the stepTemplate, the task steps will inherit them implicitly in all steps. In the example above we define the resources and securityContext for all the steps`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`volumes`}</strong>{` - the task can also mount external volumes using the volumes attribute.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The parameters that were part of the spec inputs  params can be used in the steps using the notation `}<inlineCode parentName=\"p\">{`$(<variable-name>)`}</inlineCode>{`.`}</p>\n          </li>\n        </ul>\n        <h3>{`Task Deploy`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The application test task could be created using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl apply -f test_task.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn task ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list one Task as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME        AGE\njava-test   22 seconds ago\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`TaskRun`}</h3>\n        <ul>\n          <li parentName=\"ul\">{`The `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/taskruns.md\"\n            }}>{`TaskRun`}</a>{` is used to run a specific task independently. In the following section we will run the build-app task created in the previous step`}</li>\n        </ul>\n        <h4>{`TaskRun Creation`}</h4>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The following snippet shows what a Tekton TaskRun YAML looks like:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`test_taskrun.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: TaskRun\nmetadata:\n  generateName: test-task-run-\nspec:\n  taskRef:\n    name: java-test\n  inputs:\n    resources:\n      - name: source\n        resourceRef:\n          name: source\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`generateName`}</strong>{` - since the TaskRun can be run many times, in order to have unqiue name across the TaskRun ( helpful when checking the TaskRun history) we use this generateName instead of name. When Kubernetes sees generateName it will generate unquie set of characters and suffix the same to build-app-, similar to how pod names are generated`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`taskRef`}</strong>{` - this is used to refer to the Task by its name that will be run as part of this TaskRun. In this example we use build-app Task.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`As described in the earlier section that the Task inputs and outputs could be overridden via TaskRun.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`In this example we make the Task Run `}<inlineCode parentName=\"p\">{`spec > inputs > resources > source`}</inlineCode>{` to refer to pipeline resource `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` via the `}<inlineCode parentName=\"p\">{`resourceRef`}</inlineCode>{`.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The application test task(java-maven-test) could be run using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl create -n $NAMESPACE -f test_taskrun.yaml\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{` - As tasks will use generated name, never use `}<inlineCode parentName=\"p\">{`kubectl apply -f test_taskrun.yaml`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The above command should list one TaskRun as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`NAME                       STARTED        DURATION   STATUS\ntest-task-run-q6s8c        1 minute ago   ---        Running(Pending)\n`}</code></pre>\n            <p parentName=\"li\">{`  `}<strong parentName=\"p\">{`Note`}</strong>{` - It will take few seconds for the TaskRun to show status as Running as it needs to download the container images.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To check the logs of the Task Run using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{`:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn tr logs -f -a -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\"><strong parentName=\"p\">{`Note`}</strong>{` - Each task step will be run within a container of its own.\nThe -f or -a allows to tail the logs from all the containers of the task. For more options run `}<inlineCode parentName=\"p\">{`tkn tr logs --help`}</inlineCode></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`If you see the TaskRun status as Failed or Error use the following command to check the reason for error:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn tr describe <taskrun-name> -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`If it is successful, you will see something like below.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The above command should list one TaskRun as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`NAME                  STARTED          DURATION     STATUS\ntest-task-run-q6s8c   47 seconds ago   34 seconds   Succeeded\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`Creating additional tasks and deploying them`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create a Task to build a container image and push to the registry`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`This task will be later used by the pipeline.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Download the task file `}<a parentName=\"p\" {...{\n                \"href\": \"/yamls/tekton-lab/task-buildah.yaml\"\n              }}>{`task-buildah.yaml`}</a>{` to build the image, push the image to the registy:`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the `}<inlineCode parentName=\"p\">{`buildah`}</inlineCode>{` Task using the file and the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl apply -f task-buildah.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn task ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list one Task as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`NAME              AGE\nbuildah            4 seconds ago\njava-test         46 minutes ago\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To access the docker registry, create the required secret as follows.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the environment variables to be use, replace with real values and include the single quotes:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export DOCKER_USERNAME='<DOCKER_USERNAME>'\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export DOCKER_PASSWORD='<DOCKER_PASSWORD>'\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export DOCKER_EMAIL='<DOCKER_EMAIL>'\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run the following command to create a secret `}<inlineCode parentName=\"p\">{`regcred`}</inlineCode>{` in the namespace `}<inlineCode parentName=\"p\">{`NAMESPACE`}</inlineCode></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl create secret docker-registry regcred \\\\\n  --docker-server=https://index.docker.io/v1/ \\\\\n  --docker-username=\\${DOCKER_USERNAME} \\\\\n  --docker-password=\\${DOCKER_PASSWORD} \\\\\n  --docker-email=\\${DOCKER_EMAIL} \\\\\n  -n \\${NAMESPACE}\n`}</code></pre>\n            <p parentName=\"li\">{`  Before creating, replace the values as mentioned above.\nNote: If your docker password contains special characters in it, please enclose the password in double quotes or place an escape character before each special character.`}</p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`(Optional) Only if you have problems with the credentials you can recreate it, but you have to deleted first`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                    \"className\": \"language-bash\"\n                  }}>{`kubectl delete secret regcred -n $NAMESPACE\n`}</code></pre></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Before we run the Task using TaskRun let us create the Kubernetes service account and attach the needed permissions to the service account, the following Kubernetes resource defines a service account called `}<inlineCode parentName=\"p\">{`pipeline`}</inlineCode>{` in namespace `}<inlineCode parentName=\"p\">{`$NAMESPACE`}</inlineCode>{` who will have administrative role within the `}<inlineCode parentName=\"p\">{`$NAMESPACE`}</inlineCode>{` namespace.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`sa.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: pipeline\nsecrets:\n  - name: regcred\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create sa role as follows:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl create -n $NAMESPACE -f sa.yaml\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Lets create a Task Run for `}<inlineCode parentName=\"p\">{`buildah`}</inlineCode>{` Task using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI passing the inputs, outputs and service account`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn task start buildah \\\\\n  -i source=source \\\\\n  -i image=image \\\\\n  -s pipeline \\\\\n  -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  The task will start and logs will start printing automatically`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Taskrun started: buildah-run-vvrg2\nWaiting for logs to be available...\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Verify the status of the Task Run`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn tr ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  Output should look like this`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                  STARTED          DURATION     STATUS\nbuildah-run-zbsrv      2 minutes ago    1 minute     Succeeded\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To clean up all Pods associated with all Task Runs, delete all the task runs resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl delete taskrun --all -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`(Optional) Instead of starting the Task via `}<inlineCode parentName=\"p\">{`tkn task start`}</inlineCode>{` you could also use yaml TaskRun, create a file `}<strong parentName=\"p\">{`taskrun.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: TaskRun\nmetadata:\n  generateName: buildah-task-run-\nspec:\n  serviceAccountName: pipeline\n  taskRef:\n    name: buildah\n  inputs:\n    resources:\n      - name: source\n        resourceRef:\n          name: source\n      - name: image\n        resourceRef:\n          name: image\n`}</code></pre>\n            <p parentName=\"li\">{`  Then create the TaskRun with `}<inlineCode parentName=\"p\">{`generateName`}</inlineCode></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl create -f taskrun.yaml -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`  Follow the logs with:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn tr logs -f -n $NAMESPACE\n`}</code></pre>\n          </li>\n        </ul>\n        <h2>{`Pipelines`}</h2>\n        <h3>{`Pipeline Creation`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Pipelines allows to start multiple Tasks, in parallel or in a `}<a parentName=\"p\" {...{\n                \"href\": \"https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#runafter\"\n              }}>{`certain order`}</a></p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`pipeline.yaml`}</strong>{`, the Pipeline contains two Tasks`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: Pipeline\nmetadata:\n  name: test-build-push\nspec:\n  resources:\n    - name: source\n      type: git\n    - name: image\n      type: image\n  tasks:\n    - name: test\n      taskRef:\n        name: java-test\n      resources:\n        inputs:\n          - name: source\n            resource: source\n    - name: build-push\n      taskRef:\n        name: buildah\n      runAfter: [test]\n      resources:\n        inputs:\n          - name: source\n            resource: source\n          - name: image\n            resource: image\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Pipeline defines a list of Tasks to execute in order, while also indicating if any outputs should be used as inputs of a following Task by using the from field and also indicating the order of executing (using the runAfter and from fields). The same variable substitution you used in Tasks is also available in a Pipeline.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the Pipeline using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl apply -f pipeline.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline ls -n $NAMESPACE\n`}</code></pre>\n            <p parentName=\"li\">{`The above command should list one Pipeline as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`NAME              AGE              LAST RUN   STARTED   DURATION   STATUS\ntest-build-push   31 seconds ago   ---        ---       ---        ---\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`PipelineRun`}</h3>\n        <h4>{`PipelineRun Creation`}</h4>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`To execute the Tasks in the Pipeline, you must create a PipelineRun. Creation of a PipelineRun will trigger the creation of TaskRuns for each Task in your pipeline.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the file `}<strong parentName=\"p\">{`pipelinerun.yaml`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-yaml\"\n              }}>{`apiVersion: tekton.dev/v1alpha1\nkind: PipelineRun\nmetadata:\n  generateName: test-build-push-run-\nspec:\n  serviceAccountName: pipeline\n  pipelineRef:\n    name: test-build-push\n  serviceAccountName: pipeline\n  resources:\n    - name: source\n      resourceRef:\n        name: source\n    - name: image\n      resourceRef:\n        name: image\n`}</code></pre>\n            <p parentName=\"li\">{`  `}<strong parentName=\"p\">{`serviceAccount`}</strong>{` - it is always recommended to have a service account associated with PipelineRun, which can then be used to define fine grained roles.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create the PipelineRun using the command:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl create -f pipelinerun.yaml -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`We will use the Tekton cli to inspect the created resources`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipelinerun ls -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The above command should list one PipelineRun as shown below:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`NAME                        STARTED         DURATION   STATUS\ntest-build-push-run-c7zgv   8 seconds ago   ---        Running\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Wait for few minutes for your pipeline to complete all the tasks. If it is successful, you will see something like below.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline ls -n $NAMESPACE\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME              AGE              LAST RUN                    STARTED         DURATION    STATUS\ntest-build-push   33 minutes ago   test-build-push-run-c7zgv   2 minutes ago   2 minutes   Succeeded\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run again the pipeline ls command`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipelinerun ls -n $NAMESPACE\n`}</code></pre>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                        STARTED         DURATION    STATUS\ntest-build-push-run-c7zgv   2 minutes ago   2 minutes   Succeeded\n`}</code></pre>\n            <p parentName=\"li\">{`  If it is successful, go to your container registry account and verify if you have the `}<inlineCode parentName=\"p\">{`cloudnative_sample_app`}</inlineCode>{` image pushed.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`(Optional) Run the pipeline again using the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline start test-build-push \\\\\n  -r source=source \\\\\n  -r image=image \\\\\n  -s pipeline \\\\\n  -n $NAMESPACE\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`(Optional) Re-run the pipeline using last pipelinerun values`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`tkn pipeline start test-build-push --last -n $NAMESPACE\n`}</code></pre>\n          </li>\n        </ul>\n        <h2>{`Deploy Application`}</h2>\n        <ul>\n          <li parentName=\"ul\">{`Deploy the app as follows:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export APP_YAML_URL='https://raw.githubusercontent.com/ibm-cloud-architecture/cloudnative_sample_app_deploy/master/kubernetes'\nkubectl apply -n $NAMESPACE -f $APP_YAML_URL/deployment.yaml\nkubectl apply -n $NAMESPACE -f $APP_YAML_URL/service.yaml\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Replace the default image with the new image you deployed using Tekton`}</li>\n          <li parentName=\"ul\">{`Replace `}<inlineCode parentName=\"li\">{`<DOCKER_USERNAME>`}</inlineCode>{` with your username`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export DOCKER_USERNAME='<DOCKER_USERNAME>'\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Replace `}<inlineCode parentName=\"li\">{`<SHORT_GIT_HASH>`}</inlineCode>{` with the tag of the image you push to the registry, you can go the registry Web UI and verify the tag value.`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export SHORT_GIT_HASH='<SHORT_GIT_HASH>'\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Set the environment variable `}<inlineCode parentName=\"li\">{`IMAGE_URL`}</inlineCode>{` to the new image url value sing the two previous environment variables `}<inlineCode parentName=\"li\">{`DOCKER_USERNAME`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`SHORT_GIT_HASH`}</inlineCode><pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export IMAGE_URL=docker.io/\\${DOCKER_USERNAME}/cloudnative_sample_app:\\${SHORT_GIT_HASH}\necho $IMAGE_URL\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Replace the image on the deployment`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl set image \\\\\n  deployment/cloudnativesampleapp-deployment \\\\\n  \\\\*=\\${IMAGE_URL} \\\\\n  -n $NAMESPACE --record\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Verify the image is set`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl get deploy \\\\\n  cloudnativesampleapp-deployment \\\\\n  -o jsonpath='{.spec.template.spec.containers[0].image}' \\\\\n  -n $NAMESPACE\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Verify if the pods are running:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl get pods -n $NAMESPACE -l app=cloudnativesampleapp-selector\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME                          READY   STATUS      RESTARTS   AGE\ncloudnativesampleapp...       1/1     Running     0          82s\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Retrieve the service NodePort:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl describe svc cloudnativesampleapp-service -n $NAMESPACE | grep NodePort\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Type:                     NodePort\nNodePort:                 http  30632/TCP\n`}</code></pre>{`  In this instance the NodePort assigned is `}<inlineCode parentName=\"li\">{`30632`}</inlineCode></li>\n          <li parentName=\"ul\">{`Get the External Public IP as follows:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`minikube ip\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`192.168.64.30\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Now access the compose the URL of the App using IP and NodePort`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export APP_EXTERNAL_IP=$(minikube ip)\nexport APP_NODEPORT=$(kubectl get svc cloudnativesampleapp-service -n $NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')\nexport APP_URL=\"http://\\${APP_EXTERNAL_IP}:\\${APP_NODEPORT}/greeting?name=Carlos\"\necho $APP_URL\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`http://192.168.64.30:30632//greeting?name=Carlos\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Now access the app from terminal or browser`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`curl $APP_URL\n`}</code></pre><pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`open $APP_URL\n`}</code></pre></li>\n        </ul>\n      </Tab>\n    </Tabs>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}