{"componentChunkName":"component---src-pages-continuous-deployment-activities-index-mdx","path":"/continuous-deployment/activities/","result":{"pageContext":{"frontmatter":{"title":"ArgoCD Lab","description":"Lab for continuous delivery using ArgoCD"},"relativePagePath":"/continuous-deployment/activities/index.mdx","titleType":"page","MdxNode":{"id":"938bcd39-ccd6-5e79-9d1f-96b5882ba313","children":[],"parent":"cc2a0948-4e78-539a-8cde-9c8af312e478","internal":{"content":"---\ntitle: ArgoCD Lab\ndescription: Lab for continuous delivery using ArgoCD\n---\n\n<AnchorLinks>\n  <AnchorLink>Pre-requisites</AnchorLink>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>ArgoCD Installation</AnchorLink>\n  <AnchorLink>Deploying the Application</AnchorLink>\n  <AnchorLink>Verifying the deployment</AnchorLink>\n  <AnchorLink>Using the ArgoCD CLI</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n</AnchorLinks>\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    oc new-project argocd\n    ```\n- Install ArgoCD as follows.\n    ```\n    oc apply --filename https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/argo-lab/argocd-operator.yaml\n    ```\n- When installing the tutorial, make sure you wait until the argocd-operator is finished before installing the argocd-cr..or it will fail. You can do this:\n    ```bash\n    oc get ClusterServiceVersion/argocd-operator-helm.v0.0.3 -n argocd\n    NAME                          DISPLAY                   VERSION   REPLACES                      PHASE\n    argocd-operator-helm.v0.0.3   Argo CD Operator (Helm)   0.0.3     argocd-operator-helm.v0.0.2   Succeeded\n    ```\n    and wait for the \"succeeded\" to come up before proceeding.\n    ```\n    oc apply --filename https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/argo-lab/argocd-cr.yaml\n    ```\n- Install the `argocd` CLI, for example on OSX use brew\n    ```bash\n    brew tap argoproj/tap\n    brew install argoproj/tap/argocd\n    ```\n- Set an environment variable `ARGOCD_URL` using the `EXTERNAL-IP`\n    ```bash\n    export ARGOCD_SERVER=\"$(oc get route argocd-server -n argocd -o jsonpath='{.status.ingress[0].host}')\"\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n\n## Deploying the app\n\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command, it's the name of the pod for the argo-server\n    ```bash\n    oc get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n    For example the output is similar to this:\n    ```\n    argocd-server-b54756f69-jncc9\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `openshift`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- List the cloudnativesampleapp-service route\n    ```\n    oc get route\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                 HOST/PORT                                     PATH   SERVICES                       PORT   TERMINATION   WILDCARD\n    cloudnative-sample   cloudnative-sample-default.apps-crc.testing          cloudnativesampleapp-service   9080                 None\n    ```\n- Set an environment variable `APP_URL` using the `EXTERNAL-IP`\n    ```\n    export APP_URL=\"http://$(oc get route cloudnative-sample -o jsonpath='{.status.ingress[0].host}')\"\n    echo ARGOCD_SERVER=$APP_URL\n    ```\n- Access the url using `curl`\n    ```\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## Using the ArgoCD CLI\n\n- Login using the cli.\n- Login as the `admin` user.\n- The initial password is autogenerated to be the pod name of the Argo CD API server. This can be retrieved with the following command.\n    ```bash\n    oc get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n- Now login as follows.\n    ```bash\n    argocd login $ARGOCD_SERVER\n    ```\n    \n    ```\n    WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain \n    any IP SANs. Proceed insecurely (y/n)? y\n    Username: admin\n    Password: \n    'admin' logged in successfully\n    Context '10.97.240.99' updated\n    ```\n- List the applications\n    ```bash\n    argocd app list\n    ```\n    ```\n    NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n    sample  https://kubernetes.default.svc  default    default  Synced  Healthy  <none>      <none>      https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy  openshift  HEAD\n    ```\n- Get application details\n    ```bash\n    argocd app get sample\n    ```\n    ```\n    Name:               sample\n    Project:            default\n    Server:             https://kubernetes.default.svc\n    Namespace:          default\n    URL:                https://10.97.240.99/applications/sample\n    Repo:               https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n    Target:             HEAD\n    Path:               openshift\n    SyncWindow:         Sync Allowed\n    Sync Policy:        <none>\n    Sync Status:        Synced to HEAD (9684037)\n    Health Status:      Healthy\n\n    GROUP  KIND        NAMESPACE  NAME                             STATUS  HEALTH   HOOK  MESSAGE\n        Service     default    cloudnativesampleapp-service     Synced  Healthy        service/cloudnativesampleapp-service created\n    apps   Deployment  default    cloudnativesampleapp-deployment  Synced  Healthy        deployment.apps/cloudnativesampleapp-deployment created\n    ```\n- Show application deployment history\n    ```bash\n    argocd app history sample\n    ```\n    ```\n    ID  DATE                           REVISION\n    0   2020-02-12 21:10:32 -0500 EST  HEAD (9684037)\n    ```\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    kubectl create namespace argocd\n    ```\n- Install ArgoCD as follows.\n    ```bash\n    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n    ```\n- Install the `argocd` CLI, for example on OSX use brew\n    ```bash\n    brew tap argoproj/tap\n    brew install argoproj/tap/argocd\n    ```\n- To allow access via LoadBalancer and leverage the `minikube tunnel` running in the background, patch the argocd server service\n    ```bash\n    kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n    ```\n- List the argocd-server service\n    ```bash\n    kubectl get svc argocd-server -n argocd\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME            TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)                      AGE\n    argocd-server   LoadBalancer   10.97.240.99   10.97.240.99   80:30286/TCP,443:31716/TCP   41s\n    ```\n- Set an environment variable `ARGOCD_URL` using the `EXTERNAL-IP`\n    ```bash\n    export ARGOCD_SERVER=\"$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n\n## Deploying the app\n\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command, it's the name of the pod for the argo-server\n    ```bash\n    kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n    For example the output is similar to this:\n    ```\n    argocd-server-b54756f69-jncc9\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `kubernetes`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- To allow access via LoadBalancer and leverage the `minikube tunnel` running in the background, patch the argocd server service\n    ```bash\n    kubectl patch svc cloudnativesampleapp-service -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n    ```\n- List the cloudnativesampleapp-service service\n    ```bash\n    kubectl get svc cloudnativesampleapp-service\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)          AGE\n    cloudnativesampleapp-service   LoadBalancer   10.109.242.212   10.109.242.212   9080:31905/TCP   13m\n    ```\n- Set an environment variable `APP_URL` using the `EXTERNAL-IP`\n    ```bash\n    export APP_URL=\"http://$(kubectl get svc cloudnativesampleapp-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):9080\"\n    echo ARGOCD_SERVER=$APP_URL\n    ```\n- Access the url using `curl`\n    ```bash\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## Using the ArgoCD CLI\n\n- Login using the cli.\n- Login as the `admin` user.\n- The initial password is autogenerated to be the pod name of the Argo CD API server. This can be retrieved with the following command.\n    ```bash\n    kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n- Now login as follows.\n    ```bash\n    argocd login $ARGOCD_SERVER\n    ```\n    \n    ```\n    WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain \n    any IP SANs. Proceed insecurely (y/n)? y\n    Username: admin\n    Password: \n    'admin' logged in successfully\n    Context '10.97.240.99' updated\n    ```\n- List the applications\n    ```bash\n    argocd app list\n    ```\n    ```\n    NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n    sample  https://kubernetes.default.svc  default    default  Synced  Healthy  <none>      <none>      https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy  kubernetes  HEAD\n    ```\n- Get application details\n    ```bash\n    argocd app get sample\n    ```\n    ```\n    Name:               sample\n    Project:            default\n    Server:             https://kubernetes.default.svc\n    Namespace:          default\n    URL:                https://10.97.240.99/applications/sample\n    Repo:               https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n    Target:             HEAD\n    Path:               kubernetes\n    SyncWindow:         Sync Allowed\n    Sync Policy:        <none>\n    Sync Status:        Synced to HEAD (9684037)\n    Health Status:      Healthy\n\n    GROUP  KIND        NAMESPACE  NAME                             STATUS  HEALTH   HOOK  MESSAGE\n        Service     default    cloudnativesampleapp-service     Synced  Healthy        service/cloudnativesampleapp-service created\n    apps   Deployment  default    cloudnativesampleapp-deployment  Synced  Healthy        deployment.apps/cloudnativesampleapp-deployment created\n    ```\n- Show application deployment history\n    ```bash\n    argocd app history sample\n    ```\n    ```\n    ID  DATE                           REVISION\n    0   2020-02-12 21:10:32 -0500 EST  HEAD (9684037)\n    ```\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n\n</Tab>\n\n</Tabs>\n","type":"Mdx","contentDigest":"45c0f4ac0f6deb3f452d0f810c90bb8c","counter":299,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"ArgoCD Lab","description":"Lab for continuous delivery using ArgoCD"},"exports":{},"rawBody":"---\ntitle: ArgoCD Lab\ndescription: Lab for continuous delivery using ArgoCD\n---\n\n<AnchorLinks>\n  <AnchorLink>Pre-requisites</AnchorLink>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>ArgoCD Installation</AnchorLink>\n  <AnchorLink>Deploying the Application</AnchorLink>\n  <AnchorLink>Verifying the deployment</AnchorLink>\n  <AnchorLink>Using the ArgoCD CLI</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n</AnchorLinks>\n\n<Tabs>\n<Tab label=\"OpenShift\">\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    oc new-project argocd\n    ```\n- Install ArgoCD as follows.\n    ```\n    oc apply --filename https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/argo-lab/argocd-operator.yaml\n    ```\n- When installing the tutorial, make sure you wait until the argocd-operator is finished before installing the argocd-cr..or it will fail. You can do this:\n    ```bash\n    oc get ClusterServiceVersion/argocd-operator-helm.v0.0.3 -n argocd\n    NAME                          DISPLAY                   VERSION   REPLACES                      PHASE\n    argocd-operator-helm.v0.0.3   Argo CD Operator (Helm)   0.0.3     argocd-operator-helm.v0.0.2   Succeeded\n    ```\n    and wait for the \"succeeded\" to come up before proceeding.\n    ```\n    oc apply --filename https://raw.githubusercontent.com/ibm-cloud-architecture/learning-cloudnative-101/master/static/yamls/argo-lab/argocd-cr.yaml\n    ```\n- Install the `argocd` CLI, for example on OSX use brew\n    ```bash\n    brew tap argoproj/tap\n    brew install argoproj/tap/argocd\n    ```\n- Set an environment variable `ARGOCD_URL` using the `EXTERNAL-IP`\n    ```bash\n    export ARGOCD_SERVER=\"$(oc get route argocd-server -n argocd -o jsonpath='{.status.ingress[0].host}')\"\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n\n## Deploying the app\n\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command, it's the name of the pod for the argo-server\n    ```bash\n    oc get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n    For example the output is similar to this:\n    ```\n    argocd-server-b54756f69-jncc9\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `openshift`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- List the cloudnativesampleapp-service route\n    ```\n    oc get route\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                 HOST/PORT                                     PATH   SERVICES                       PORT   TERMINATION   WILDCARD\n    cloudnative-sample   cloudnative-sample-default.apps-crc.testing          cloudnativesampleapp-service   9080                 None\n    ```\n- Set an environment variable `APP_URL` using the `EXTERNAL-IP`\n    ```\n    export APP_URL=\"http://$(oc get route cloudnative-sample -o jsonpath='{.status.ingress[0].host}')\"\n    echo ARGOCD_SERVER=$APP_URL\n    ```\n- Access the url using `curl`\n    ```\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## Using the ArgoCD CLI\n\n- Login using the cli.\n- Login as the `admin` user.\n- The initial password is autogenerated to be the pod name of the Argo CD API server. This can be retrieved with the following command.\n    ```bash\n    oc get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n- Now login as follows.\n    ```bash\n    argocd login $ARGOCD_SERVER\n    ```\n    \n    ```\n    WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain \n    any IP SANs. Proceed insecurely (y/n)? y\n    Username: admin\n    Password: \n    'admin' logged in successfully\n    Context '10.97.240.99' updated\n    ```\n- List the applications\n    ```bash\n    argocd app list\n    ```\n    ```\n    NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n    sample  https://kubernetes.default.svc  default    default  Synced  Healthy  <none>      <none>      https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy  openshift  HEAD\n    ```\n- Get application details\n    ```bash\n    argocd app get sample\n    ```\n    ```\n    Name:               sample\n    Project:            default\n    Server:             https://kubernetes.default.svc\n    Namespace:          default\n    URL:                https://10.97.240.99/applications/sample\n    Repo:               https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n    Target:             HEAD\n    Path:               openshift\n    SyncWindow:         Sync Allowed\n    Sync Policy:        <none>\n    Sync Status:        Synced to HEAD (9684037)\n    Health Status:      Healthy\n\n    GROUP  KIND        NAMESPACE  NAME                             STATUS  HEALTH   HOOK  MESSAGE\n        Service     default    cloudnativesampleapp-service     Synced  Healthy        service/cloudnativesampleapp-service created\n    apps   Deployment  default    cloudnativesampleapp-deployment  Synced  Healthy        deployment.apps/cloudnativesampleapp-deployment created\n    ```\n- Show application deployment history\n    ```bash\n    argocd app history sample\n    ```\n    ```\n    ID  DATE                           REVISION\n    0   2020-02-12 21:10:32 -0500 EST  HEAD (9684037)\n    ```\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n\n</Tab>\n\n<Tab label=\"IKS\">\n\n## Pre-requisites\n\nMake sure your environment is setup properly for the lab.\n\nCheck the [Environment Setup](../prerequisites/#environment-setup) page for your setup.\n\n## ArgoCD Installation\n\n- Create the namespace `argocd` to install argocd\n    ```bash\n    kubectl create namespace argocd\n    ```\n- Install ArgoCD as follows.\n    ```bash\n    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n    ```\n- Install the `argocd` CLI, for example on OSX use brew\n    ```bash\n    brew tap argoproj/tap\n    brew install argoproj/tap/argocd\n    ```\n- To allow access via LoadBalancer and leverage the `minikube tunnel` running in the background, patch the argocd server service\n    ```bash\n    kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n    ```\n- List the argocd-server service\n    ```bash\n    kubectl get svc argocd-server -n argocd\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME            TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)                      AGE\n    argocd-server   LoadBalancer   10.97.240.99   10.97.240.99   80:30286/TCP,443:31716/TCP   41s\n    ```\n- Set an environment variable `ARGOCD_URL` using the `EXTERNAL-IP`\n    ```bash\n    export ARGOCD_SERVER=\"$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\n    export ARGOCD_URL=\"https://$ARGOCD_SERVER\"\n    echo ARGOCD_URL=$ARGOCD_URL\n    echo ARGOCD_SERVER=$ARGOCD_SERVER\n    ```\n\n## Deploying the app\n\n- Login into the UI.\n    ```bash\n    open $ARGOCD_URL\n    ```\n- Use `admin` as the username and get the password with the following command, it's the name of the pod for the argo-server\n    ```bash\n    kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n    For example the output is similar to this:\n    ```\n    argocd-server-b54756f69-jncc9\n    ```\n\n![ArgoCD Login](./images/argocd_login.png)\n\n- Now go back to the ArgoCD home and click on `NEW APP`.\n- Add the below details:\n- Application Name: `sample`\n- Project - `default`\n- SYNC POLICY: `Manual`\n- REPO URL: `https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy`\n- Revision: `HEAD`\n- Path: `kubernetes`\n\n![app details one](./images/app_argo_1.png)\n\n- Cluster - Select the default one `https://kubernetes.default.svc` to deploy in-cluster\n- Namespace - `default`\n- Click Create to finish\n\n![app details two](./images/app_argo_2.png)\n\n- You will now see the available apps.\n\n![sampleapp create](./images/sampleapp_create.png)\n\n- Initially, the app will be out of sync. It is yet to be deployed. You need to sync it for deploying.\n\nTo sync the application, click `SYNC` and then `SYNCHRONIZE`.\n\n![out of sync](./images/out_of_sync.png)\n\n- Wait till the app is deployed.\n\n![synched app](./images/synched_app.png)\n\n- Once the app is deployed, click on it to see the details.\n\n![sample app deployed](./images/sample_app_deployed.png)\n\n![sample app full deployment](./images/sample_app_full_deployment.png)\n\n## Verifying the deployment\n\n- Access the app to verify if it is correctly deployed.\n- To allow access via LoadBalancer and leverage the `minikube tunnel` running in the background, patch the argocd server service\n    ```bash\n    kubectl patch svc cloudnativesampleapp-service -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'\n    ```\n- List the cloudnativesampleapp-service service\n    ```bash\n    kubectl get svc cloudnativesampleapp-service\n    ```\n    It should have an IP under `EXTERNAL-IP` column\n    ```\n    NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)          AGE\n    cloudnativesampleapp-service   LoadBalancer   10.109.242.212   10.109.242.212   9080:31905/TCP   13m\n    ```\n- Set an environment variable `APP_URL` using the `EXTERNAL-IP`\n    ```bash\n    export APP_URL=\"http://$(kubectl get svc cloudnativesampleapp-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):9080\"\n    echo ARGOCD_SERVER=$APP_URL\n    ```\n- Access the url using `curl`\n    ```bash\n    curl \"$APP_URL/greeting?name=Carlos\"\n    ```\n    ```\n    {\"id\":2,\"content\":\"Welcome to Cloudnative bootcamp !!! Hello, Carlos :)\"}\n    ```\n\n## Using the ArgoCD CLI\n\n- Login using the cli.\n- Login as the `admin` user.\n- The initial password is autogenerated to be the pod name of the Argo CD API server. This can be retrieved with the following command.\n    ```bash\n    kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n    ```\n- Now login as follows.\n    ```bash\n    argocd login $ARGOCD_SERVER\n    ```\n    \n    ```\n    WARNING: server certificate had error: x509: cannot validate certificate for 10.97.240.99 because it doesn't contain \n    any IP SANs. Proceed insecurely (y/n)? y\n    Username: admin\n    Password: \n    'admin' logged in successfully\n    Context '10.97.240.99' updated\n    ```\n- List the applications\n    ```bash\n    argocd app list\n    ```\n    ```\n    NAME    CLUSTER                         NAMESPACE  PROJECT  STATUS  HEALTH   SYNCPOLICY  CONDITIONS  REPO                                                                     PATH   TARGET\n    sample  https://kubernetes.default.svc  default    default  Synced  Healthy  <none>      <none>      https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy  kubernetes  HEAD\n    ```\n- Get application details\n    ```bash\n    argocd app get sample\n    ```\n    ```\n    Name:               sample\n    Project:            default\n    Server:             https://kubernetes.default.svc\n    Namespace:          default\n    URL:                https://10.97.240.99/applications/sample\n    Repo:               https://github.com/ibm-cloud-architecture/cloudnative_sample_app_deploy\n    Target:             HEAD\n    Path:               kubernetes\n    SyncWindow:         Sync Allowed\n    Sync Policy:        <none>\n    Sync Status:        Synced to HEAD (9684037)\n    Health Status:      Healthy\n\n    GROUP  KIND        NAMESPACE  NAME                             STATUS  HEALTH   HOOK  MESSAGE\n        Service     default    cloudnativesampleapp-service     Synced  Healthy        service/cloudnativesampleapp-service created\n    apps   Deployment  default    cloudnativesampleapp-deployment  Synced  Healthy        deployment.apps/cloudnativesampleapp-deployment created\n    ```\n- Show application deployment history\n    ```bash\n    argocd app history sample\n    ```\n    ```\n    ID  DATE                           REVISION\n    0   2020-02-12 21:10:32 -0500 EST  HEAD (9684037)\n    ```\n## References\n\n- [ArgoCD](https://argoproj.github.io/argo-cd/)\n\n</Tab>\n\n</Tabs>\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/continuous-deployment/activities/index.mdx"}}}}