apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: argocd
  namespace: argocd
spec:
  nameOverride: argocd
  fullnameOverride: ""
  installCRDs: false
  global:
    image:
      repository: argoproj/argocd
      tag: v1.4.0
      imagePullPolicy: IfNotPresent
    securityContext: {}
  controller:
    name: application-controller
    image:
      repository: null
      tag: null
      imagePullPolicy: null
    args:
      statusProcessors: "20"
      operationProcessors: "10"
    logLevel: info
    extraArgs: {}
    env: []
    podAnnotations: {}
    podLabels: {}
    containerSecurityContext: {}
    containerPort: 8082
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    volumeMounts: []
    volumes: []
    service:
      annotations: {}
      labels: {}
      port: 8082
    nodeSelector: {}
    tolerations: []
    affinity: {}
    priorityClassName: ""
    resources: {}
    serviceAccount:
      create: true
      name: argocd-application-controller
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8082
      serviceMonitor:
        enabled: false
      rules:
        enabled: false
        spec: []
    clusterAdminAccess:
      enabled: true
  dex:
    enabled: true
    name: dex-server
    image:
      repository: quay.io/dexidp/dex
      tag: latest
      imagePullPolicy: IfNotPresent
    initImage:
      repository: null
      tag: null
      imagePullPolicy: null
    env: []
    serviceAccount:
      create: true
      name: argocd-dex-server
    volumeMounts:
      - name: static-files
        mountPath: /shared
    volumes:
      - name: static-files
        emptyDir: {}
    containerPortHttp: 5556
    servicePortHttp: 5556
    containerPortGrpc: 5557
    servicePortGrpc: 5557
    nodeSelector: {}
    tolerations: []
    affinity: {}
    priorityClassName: ""
    containerSecurityContext: {}
    resources: {}
  redis:
    enabled: true
    name: redis
    image:
      repository: redis
      tag: 5.0.3
      imagePullPolicy: IfNotPresent
    containerPort: 6379
    servicePort: 6379
    env: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    priorityClassName: ""
    containerSecurityContext: {}
    resources: {}
    volumeMounts: []
    volumes: []
  server:
    name: server
    image:
      repository: null
      tag: null
      imagePullPolicy: null
    extraArgs: {}
    env: []
    logLevel: info
    podAnnotations: {}
    podLabels: {}
    containerPort: 8080
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    volumeMounts: []
    volumes: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    priorityClassName: ""
    containerSecurityContext: {}
    resources: {}
    certificate:
      enabled: false
      domain: argocd.example.com
      issuer: {}
      additionalHosts: []
    service:
      annotations: {}
      labels: {}
      type: ClusterIP
      servicePortHttp: 80
      servicePortHttps: 443
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8083
      serviceMonitor:
        enabled: false
    serviceAccount:
      create: true
      name: argocd-server
    ingress:
      enabled: false
      annotations: {}
      labels: {}
      hosts: []
      paths:
        - /
      tls: []
    config:
      application.instanceLabelKey: argocd.argoproj.io/instance
    rbacConfig: {}
    additionalApplications: []
    additionalProjects: []
  repoServer:
    name: repo-server
    image:
      repository: null
      tag: null
      imagePullPolicy: null
    extraArgs: {}
    env: []
    logLevel: info
    podAnnotations: {}
    podLabels: {}
    containerPort: 8081
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    volumeMounts: []
    volumes: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    priorityClassName: ""
    containerSecurityContext: {}
    resources: {}
    service:
      annotations: {}
      labels: {}
      port: 8081
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        servicePort: 8084
      serviceMonitor:
        enabled: false
    serviceAccount:
      create: false
      annotations: {}
  configs:
    knownHosts:
      data:
        ssh_known_hosts: >
          bitbucket.org ssh-rsa
          AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==

          github.com ssh-rsa
          AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==

          gitlab.com ecdsa-sha2-nistp256
          AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=

          gitlab.com ssh-ed25519
          AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf

          gitlab.com ssh-rsa
          AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9

          ssh.dev.azure.com ssh-rsa
          AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H

          vs-ssh.visualstudio.com ssh-rsa
          AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
    tlsCerts: {}
    repositoryCredentials: {}
    secret:
      createSecret: true
      githubSecret: ""
      gitlabSecret: ""
      bitbucketServerSecret: ""
      bitbucketUUÃŒD: ""
      gogsSecret: ""
      extra: {}
      argocdServerTlsConfig: {}
  openshift:
    enabled: true
    route:
      enabled: true
      host: ""
      annotations: {}
    oAuth:
      enabled: true
      config:
        image:
          repository: quay.io/openshift/origin-cli
          tag: latest
          imagePullPolicy: IfNotPresent
        base:
          url: openshiftOAuthConfigBaseUrl
        redirect:
          url: openshiftOAuthConfigRedirectURI
        dex:
          dex.config: |
            connectors:
              - type: openshift
                # Required field for connector id.
                id: openshift
                # Required field for connector name.
                name: OpenShift
                config:
                  # Location of the OpenShift API Server. Get it with "oc whoami --show-server" or
                  # leave this default for automatic discovery (recommended)
                  issuer: openshiftOAuthConfigIssuer
                  # Name of the OpenShift OAuth Client with format: "system:serviceaccount:<namespace>:<service_account_name>" or
                  # leave this default for automatic discovery (recommended)
                  clientID: openshiftOAuthConfigClientID
                  # Value of the OpenShift OAuth client secret. Get it with "oc serviceaccounts get-token <argocd_dex_server_service_account_name>" or
                  # leave this default for automatic discovery (recommended)
                  clientSecret: openshiftOAuthConfigClientSecret
                  # ArgoCD redirect URI in format: "https://<argocd_host>/api/dex/callback" or
                  # leave this default for automatic discovery (recommended)
                  redirectURI: openshiftOAuthConfigRedirectURI
                  # Disable SSL verification
                  insecureCA: true
                  # Optional: The location of file containing SSL certificates to communicate to OpenShift
                  # rootCA: /etc/ssl/openshift.pem
      rbac:
        enabled: true
        groups:
          admins:
            name: argocd-admins
            role: "role:admin"
          developers:
            name: argoc-developers
            role: "role:readonly"
        users:
          admins:
            - developer
            - kubedadmin
            - admin
          developers: []
